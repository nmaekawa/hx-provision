---

# HXARC VARS
# ---------------------------------------------------------------------------

# when use_aws == True, and ec2 has extra volume
# check with cloudformation template that the **device name** is the same!!!
ebs_device: "/dev/xvdf"
ebs_mountpoint: "/opt/hx"

# subproc vars
subproc_rootdir: "{{ebs_mountpoint }}/subproc"
subproc_venv_dir: "{{ subproc_rootdir }}/venv"
subproc_bin_dir: "{{ subproc_rootdir }}/bin"

subproc_rootdir_base: "{{ebs_mountpoint }}/subproc"

subproc_dirs_to_create:
    - "{{ subproc_rootdir }}"
    - "{{ subproc_bin_dir }}"

# subproc specifics
subproc_deps:
  - name: "hx_util"
    git_repo: "https://github.com/Colin-Fredericks/hx_util.git"
    git_revision: "master"
    subproc_dirs_to_create:
      - "{{ subproc_rootdir_base }}/hx_util"
      - "{{ subproc_rootdir_base }}/hx_util/venv"
      - "{{ subproc_rootdir_base }}/hx_util/bin"
    subproc_wrapper_template: "roles/subproc_install/templates/wrapper_hx_util.sh.j2"
    subproc_wrapper_path: "{{ subproc_rootdir_base }}/hx_util/bin/wrapper.sh"
    subproc_script_path: "{{ subproc_rootdir_base }}/hx_util/venv/bin/hx_util"

  - name: "olxcleaner"
    git_repo: "https://github.com/jolyonb/olxcleaner.git"
    git_revision: "master"
    subproc_dirs_to_create:
      - "{{ subproc_rootdir_base }}/olxcleaner"
      - "{{ subproc_rootdir_base }}/olxcleaner/venv"
      - "{{ subproc_rootdir_base }}/olxcleaner/bin"
    subproc_wrapper_template: "roles/subproc_install/templates/wrapper_olxcleaner.sh.j2"
    subproc_wrapper_path: "{{ subproc_rootdir_base }}/olxcleaner/bin/wrapper.sh"
    subproc_script_path: "{{ subproc_rootdir_base }}/olxcleaner/venv/bin/edx-reporter"

subproc_config:
    hx_util:
      wrapper_path: "{{ subproc_deps[0].subproc_wrapper_path }}"
      display_name: "hx_util"
    olxcleaner:
      wrapper_path: "{{ subproc_deps[1].subproc_wrapper_path }}"
      display_name: "olxcleaner"

# hack to evaluate bash env var as json and sort out single/double quotes
subproc_config_env: "HXARC_SUBPROCS='{{ subproc_config | to_json }}'"

# how long output files take to be deleted
# this is set in the service provisioning in a cronjob
subproc_grace_period_in_minutes: 60

# service vars
service_name: "hxarc"
service_user: "{{ service_name }}"
service_group: "{{ service_name }}"
service_rootdir: "{{ ebs_mountpoint }}/{{ service_name }}"
service_venv_dir: "{{ service_rootdir }}/venv"
service_config_dir: "{{ service_rootdir }}/conf"
service_install_dir: "{{ service_rootdir }}/{{ service_name }}"
service_data_dir: "{{ service_rootdir }}/data"

service_work_dir: "{% if ec2_tag_cluster == 'vagrant' %}\
                {{ service_data_dir }}/work\
                   {% else %}\
                {{ ebs_mountpoint }}/data/work\
                   {% endif %}"

# specific to hxarc
service_db_dir: "{{ service_data_dir }}/db"
service_db_path: "{{ service_db_dir }}/{{ service_name }}_sqlite3.db"

service_bin_dir: "{{ service_rootdir }}/bin"
service_static_dir: "{{ service_rootdir }}/www"
service_django_static_dir: "{{ service_static_dir }}/static"
service_git_repo: "https://github.com/nmaekawa/hxarc.git"
var_service_git_revision: "{{ service_name | upper }}_GIT_REVISION"
service_git_revision: "{{ lookup('env', var_service_git_revision) | default('master', true) }}"

service_dirs_to_create:
    - "{{ service_rootdir }}"
    - "{{ service_config_dir }}"
    - "{{ service_data_dir }}"
    - "{{ service_work_dir }}"
    - "{{ service_db_dir }}"
    - "{{ service_bin_dir }}"
    - "{{ service_static_dir }}"
    - "{{ service_django_static_dir }}"

service_dotenv_path: "{{ service_config_dir }}/{{ service_name }}.env"
service_admin_user: "{{ lookup('env', 'HXARC_ADMIN_USER') | default('user', true) }}"
service_admin_email: "{{ lookup('env', 'HXARC_ADMIN_EMAIL') | default('user@user.com', true) }}"
service_admin_password: "{{ lookup('env', 'HXARC_ADMIN_PASSWORD') | default('password', true) }}"
service_default_django_settings: '{{ service_name }}.settings.dev'
service_environment:
  DJANGO_SETTINGS_MODULE: "{{ lookup('env', 'HXARC_DJANGO_SETTINGS') | default(service_default_django_settings, true) }}"
  HXARC_DJANGO_SECRET_KEY: "{{ lookup('env', 'HXARC_SECRET') | default('nao pode mais meu coracao viver assim', true) }}"
  HXARC_STATIC_ROOT: "{{ service_django_static_dir }}"
  HXARC_MEDIA_ROOT: "{{ service_work_dir }}"
  HXARC_UPLOAD_DIR: "{{ service_work_dir }}"
  HXARC_UPLOAD_FILENAME: "export"
  HXARC_DB_PATH: "{{ service_db_path }}"

  #HXARC_SUBPROCS_EXTRA: "{{ lookup('env', 'HXARC_SUBPROCS', allow_undefined=true)}}"


# TODO: sockets or tcp port have to be manually edited in template
service_gunicorn_port: "{{ lookup('env', 'HXARC_GUNICORN_PORT') | default('8236', true) }}"
service_gunicorn_host: "{{ lookup('env', 'HXARC_GUNICORN_HOST') | default('127.0.0.1', true) }}"

# some large uploads take this long in slow wifi
gunicorn_timeout_seconds: 1200


# for nmaekawa.apt
# ---------------------------------------------------------------------------
apt_required_packages_hxarc:
    - 'python-pip'
    - 'python-dev'
    - 'python-setuptools'
    - 'nginx'
    - 'supervisor'
    - 'sqlite3'


# for Stouts.users
# ---------------------------------------------------------------------------
users_enabled: yes

project_users:
    - name: '{{ service_user }}'
      authorized: []

# cloudwatch stuff
cloudwatch_namespace_prefix: 'HX/CustomMetrics'
script_install_dir: '/usr/local/bin'
cronjob_owner: '{{ service_user }}'



# PROXY VARS
# ---------------------------------------------------------------------------
enable_ssl: '{{ use_aws }}'

static_dir: "{{ service_static_dir }}"
nginx_ssl_dest_dir: "/etc/ssl/certs"
# special case for vagrant
cert_dns: 'hxarc'  # this name must match pattern for ssl cert names

# allow really huge uploads
service_upload_max_size: "1000M"

# special case for vagrant
vagrant_webserver_dns: "{{ inventory_hostname }}"

# for local services, in prod, we use the wildcard cert with this subdomain
# e.g. live.hxarc.harvardx.harvard.edu
hx_prod_subdomain: "live"
cert_partial_filename: "all_{{ cert_dns }}_{{ org_public_domain | replace('.', '_') }}"





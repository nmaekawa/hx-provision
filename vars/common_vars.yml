
# assumes either aws or vagrant, then derive remote_user(assumes ubuntu)
use_aws: "{{ (ec2_tag_cluster == 'vagrant') | ternary(False, True) }}"
my_remote_user: "{{ use_aws | ternary('ubuntu', 'vagrant') }}"

# BEWARE that devo_domain should not be published to the world!
# used in testing ONLY
prod_domain: "{{ lookup('env', 'HX_PROD_DNS') | default('harvardx.harvard.edu', true) }}"
devo_domain: "{{ lookup('env', 'HX_DEVO_DNS') | default('harvardx.harvard.edu', true) }}"
vagrant_domain: "vm"
org_public_domain: "{% if ec2_tag_cluster in ['prod', 'demo'] %}\
                 {{ prod_domain }}\
            {% elif ec2_tag_cluster == 'vagrant'  %}\
                 {{ vagrant_domain }}\
            {% else %}\
                 {{ devo_domain }}\
            {% endif %}"

# for dns valid within the vpc, like the database
org_private_domain: "{{ ec2_tag_cluster }}.org"

# for Stouts.users
users_developers:
    - name: nmaekawa
      groups: ['sudo']
      authorized:
          - https://github.com/nmaekawa.keys
    - name: lduarte
      groups: ['sudo']
      authorized:
          - https://github.com/lduarte1991.keys
    - name: hxops
      groups: ['sudo']
      authorized:
          - https://github.com/harvardx-tech-ops.keys

users_ssh_keys: '{{ users_users }}'


# certificates mount point
local_certs_dir: '{{ lookup("env", "LOCAL_CERTS_DIR") | default("/Volumes/magic_numbers/certs", true) }}'


# webserver dns used for django apps, hx varnish, and nginx configs
# - based on instance tags and definitions from service-specific var files
#   e.g. vars/hxprezi_vars.yml
# - in some cases, prod has a subdomain; e.g. live.hxarc.{{ org_public_domain # }}
# - in some cases, the dns name does not match the service name, in this case,
#   define cert_name in service-specific var file
#   e.g. hxprezi dns is mirador.hx.h.e
service_cert_name: "{% if cert_name is defined and cert_name != '' %}\
        {{ cert_name }}\
    {% else %}\
        {{ service_name | mandatory }}\
    {% endif %}"
webserver_dns: "{% if ec2_tag_cluster == 'prod' %}\
        {% if hx_prod_subdomain is defined and hx_prod_subdomain|length > 0 %}\
            {{ hx_prod_subdomain }}.{{ service_cert_name }}.{{ org_public_domain }}\
        {% else %}\
            {{ service_cert_name }}.{{ org_public_domain }}\
        {% endif %}\
    {% elif ec2_tag_cluster == 'vagrant' %}\
        {{ vagrant_webserver_dns }}\
    {% else %}\
        {{ ec2_tag_cluster }}.{{ service_cert_name }}.{{ org_public_domain }}\
    {% endif %}"

# harvardx domain == NOT self-signed
is_harvard_domain: "{{ webserver_dns is defined and ((webserver_dns | regex_search('.harvard.edu')) == '.harvard.edu') }}"

# cloudwatch stuff
cloudwatch_namespace_prefix: 'HX/CustomMetrics'
script_install_dir: '/usr/local/bin'

# s3 bucket for sync and backups
s3_backup_bucket_name: 'backups-hx-edu'
s3_source_bucket_name: 'sources-hx-edu'

# when you don't know were to stash scripts
default_cronjob_scripts_dir: /usr/local/bin

# django-app might have different name from default, service_name
wsgi_module: '{{ service_name }}'

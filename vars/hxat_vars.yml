---

# HXAT VARS
# ----------------------------------------------------------------------------------

# service vars
service_name: "hxat"
service_user: "{{ service_name }}"
service_group: "{{ service_name }}"

# dbserver config from environment
service_db_name: "{{ lookup('env', 'HXAT_DB_NAME') | default(service_name , true) }}"
service_db_user: "{{ lookup('env', 'HXAT_DB_USER') | default(service_name, true) }}"
service_db_password: "{{ lookup('env', 'HXAT_DB_PASSWORD') | default(service_name, true) }}"
# hardcoded vagrant hxat postgres inventory hostname...
service_db_host: "{{ lookup('env', 'HXAT_DB_HOST') | default('dbserver.vm', true) }}"
service_db_port: "{{ lookup('env', 'HXAT_DB_PORT') | default('5432', true) }}"
service_db_backup_local_retention_in_days: 7

# check in cloudformation for the device name
ebs_device: /dev/xvdf
ebs_mountpoint: /opt/hx

rootdir: "{{ ebs_mountpoint }}"
service_rootdir: "{{ rootdir }}/{{ service_name }}"
service_venv_dir: "{{ service_rootdir }}/venv"
# uncomment, otherwise default is debug: # 'DEBUG'|'INFO'|'WARNING'|'ERROR'|'CRITICAL'
# service_log_level: "DEBUG"

service_install_dir: "{{ service_rootdir }}/{{ service_name }}"
service_static_dir: "{{ service_rootdir }}/www"
service_django_static_dir: "{{ service_static_dir }}/static"
service_config_dir: "{{ service_rootdir }}/conf"
service_bin_dir: "{{ service_rootdir }}/bin"
service_data_dir: "{{ service_rootdir }}/data"
service_backup_dir: "{{ service_data_dir }}/backup"
service_run_dir: "{{ service_rootdir }}/run"

service_gunicorn_port: "{{ lookup('env', 'HXAT_GUNICORN_PORT') | default('8236', true) }}"
service_gunicorn_host: "{{ lookup('env', 'HXAT_GUNICORN_HOST') | default('127.0.0.1', true) }}"
gunicorn_timeout_seconds: 60  # workers timeout for nginx cfg

# below configures nginx to support websockets, when hxat has asgi django app;
# check nginx_servers var for websocket detail config
websockets:
  nginx:
    worker_connections: "{{ lookup('env', 'NGINX_WORKER_CONNECTIONS') | default(16384, true) }}"
    worker_rlimit_nofile: "{{ lookup('env', 'NGINX_WORKER_RLIMIT_NOFILE') | default(16384, true) }}"
  system_limits_conf:
    soft_nproc: "{{ lookup('env', 'SYSTEM_LIMIT_SOFT_NPROC') | default(65535, true) }}"
    soft_nofile: "{{ lookup('env', 'SYSTEM_LIMIT_SOFT_NOFILE') | default(65535, true) }}"
  service_daphne:
    host: 'localhost'
    port: '8555'
    socket_dir: "{{ service_run_dir }}/daphne"

service_git_repo: "https://github.com/lduarte1991/{{ service_name }}.git"
var_service_git_revision: "{{ service_name | upper }}_GIT_REVISION"
service_git_revision: "{{ lookup('env', var_service_git_revision) | default('master', true) }}"

# easier to create dirs with this dict
service_dirs_to_create:
    - "{{ service_rootdir }}"
    - "{{ service_config_dir }}"
    - "{{ service_data_dir }}"
    - "{{ service_backup_dir }}"
    - "{{ service_bin_dir }}"
    - "{{ service_run_dir }}"
    - "{{ service_static_dir }}"
    - "{{ service_django_static_dir }}"

# specific to webapp_install role
service_dotenv_path: "{{ service_config_dir }}/{{ service_name }}.env"
# django admin user to be created
service_admin_user: "{{ lookup('env', 'HXAT_ADMIN_USER') | default('user', true) }}"
service_admin_email: "{{ lookup('env', 'HXAT_ADMIN_EMAIL') | default('user@user.com', true) }}"
service_admin_password: "{{ lookup('env', 'HXAT_ADMIN_PASSWORD') | default('password', true) }}"
service_default_django_settings: '{{ wsgi_module }}.settings.base'

# hxat specific: lti-dict json file
lti_dict_filename: "lti_dict.json"
lti_dict_local_filename: "{{ (ec2_tag_cluster in ['prod', 'demo']) | ternary('prod', 'devo') }}_{{ lti_dict_filename }}"
lti_dict_local_filepath: "{{ lookup('env', 'LTI_DICT_FILEDIR') | default('../hx-dotenv/hxat', true) }}/{{ lti_dict_local_filename }}"
lti_dict_remote_filepath: "{{ service_config_dir }}/{{ lti_dict_filename }}"

# env vars defined in service_dotenv_path file
# set default to "VPAL_UNDEF" so the template leaves it out of the final service_dotenv_path file
service_environment:
  DJANGO_SETTINGS_MODULE: "{{ lookup('env', 'HXAT_DJANGO_SETTINGS') | default(service_default_django_settings, true) }}"
  DJANGO_SECRET_KEY: "{{ lookup('env', 'HXAT_DJANGO_SECRET_KEY') | default('nao pode mais meu coracao viver assim', true) }}"
  HXAT_STATIC_ROOT: "{{ service_django_static_dir }}"
  HXAT_DB_NAME: "{{ service_db_name }}"
  HXAT_DB_USER: "{{ service_db_user }}"
  HXAT_DB_PASSWORD: "{{ service_db_password }}"
  HXAT_DB_HOST: "{{ service_db_host }}"
  HXAT_DB_PORT: "{{ service_db_port }}"
  CONSUMER_KEY: "{{ lookup('env', 'CONSUMER_KEY') | default('default_consumer_key', true) }}"
  LTI_SECRET: "{{ lookup('env', 'LTI_SECRET') | default('default_lti_secret', true) }}"
  LTI_SECRET_DICT_FILEPATH: "{{ lookup('env', 'LTI_SECRET_DICT_FILEPATH') | default(lti_dict_remote_filepath, true) }}"
  ADMIN_ROLES: "{{ lookup('env', 'ADMIN_ROLES') | default('VPAL_UNDEF', true) }}"

  X_FRAME_ALLOWED_SITES: "{{ lookup('env', 'X_FRAME_ALLOWED_SITES') | default(['0.0.0.0:8000'], true) }}"
  ORGANIZATION: "HARVARDX"

  ANNOTATION_DB_URL: "{{ lookup('env', 'ANNOTATION_DB_URL') | default('https://catchpy.vm/annos', true) }}"
  ANNOTATION_DB_KEY: "{{ lookup('env', 'ANNOTATION_DB_KEY') | default('annotation_db_key', true) }}"
  ANNOTATION_DB_SECRET: "{{ lookup('env', 'ANNOTATION_DB_SECRET') | default('annotation_db_secret', true) }}"

  ANNOTATION_LIMIT_DEFAULT: "{{ lookup('env', 'ANNOTATION_LIMIT_DEFAULT') | default('50', true) }}"
  ANNOTATION_TRANSCRIPT_DEFAULT: "{{ lookup('env', 'ANNOTATION_TRANSCRIP_DEFAULT') | default('', true) }}"
  ANNOTATION_LOGGER_URL: "{{ lookup('env', 'ANNOTATION_LOGGER_URL') | default('', true) }}"

  ACCESSIBILITY: "{{ lookup('env', 'ACCESSIBILITY') | default('True', true) }}"
  DEBUG: "{{ lookup('env', 'DEBUG') | default('False', true) }}"

  LOG_ROOT: "{{ service_data_dir }}"

  VPALJWT_LOG_JWT_ERROR: "{{ lookup('env', 'HXAT_BYPASS_API_AUTH') | default('true', true) }}"
  VPALJWT_LOG_JWT: "{{ lookup('env', 'HXAT_BYPASS_API_AUTH') | default('true', true) }}"
  HXAT_BYPASS_API_AUTH: "{{ lookup('env', 'HXAT_BYPASS_API_AUTH') | default('false', true) }}"

  HTTPS_ONLY: "{{ lookup('env', 'HTTPS_ONLY') | default('true', true) }}"
  CSRF_TRUSTED_ORIGINS: "{{ lookup('env', 'CSRF_TRUSTED_ORIGINS') | default('https://*.edx.org https://*.edge.org https://*.harvardx.harvard.edu', true) }}"
# only defines if in env

# for Stouts.users
users_enabled: yes
users_to_install:
    - 'nmaekawa'
    - 'lduarte'
    - '{{ service_user }}'

# for nmaekawa.apt
apt_service_packages:
    - 'build-essential'
    - 'libffi-dev'
    - 'openssl'
    - 'libcurl4-openssl-dev'
    - 'unzip'
    - 'inotify-tools'
    - 'python3-pip'
    - 'python3-dev'
    - 'python3-setuptools'
    - 'libpq-dev'
    - 'nginx'
    - 'supervisor'
    - 'postgresql-client'


# PROXY VARS
# ----------------------------------------------------------------------------------

static_dir: '{{ service_static_dir }}'
# special case for vagrant
vagrant_webserver_dns: '{{ inventory_hostname }}'

# need this var for allowed_hosts in django
hx_subdomain: "{{ (ec2_tag_cluster not in ['prod', 'vagrant']) | ternary(ec2_tag_cluster, '') }}"

# beware that order of location matter in nginx matching rules!
# for now, webdav servers should always have location '/'
# for now, do not set webdav and static location in same nginx server
# beware that nginx role concats location.root + location.prefix to create
#   the directory where static files should exist
nginx_servers:
  - nginx_template_path: roles/nginx/templates/proxy_server.j2
    cfg_filename: '{{ service_name }}_proxy'
    hx_subdomain: '{{ hx_subdomain }}'
    nginx_nonssl_port: 80
    nginx_ssl_port: 443
    log_reqid: true
    locations:
      - name: '{{ service_name }}_proxy'
        prefix: '/'
        root: '{{ static_dir }}'
        gunicorn_timeout_seconds: '{{ gunicorn_timeout_seconds }}'
        service_gunicorn_host: '{{ websockets.service_daphne.host }}'
        service_gunicorn_port: '{{ websockets.service_daphne.port }}'
        service_daphne_socket_dir: '{{ websockets.service_daphne.socket_dir }}'
        is_websockets: 'yes'


# REDIS VARS
# ----------------------------------------------------------------------------------
redis_timeout: 0  # no timeout set for client



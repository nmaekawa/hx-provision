---

# assumes either aws or vagrant, then derive remote_user(assumes ubuntu)
use_aws: "{{ (ec2_tag_cluster == 'vagrant') | ternary(False, True) }}"
my_remote_user: "{{ use_aws | ternary('ubuntu', 'vagrant') }}"

org_dns_domain: "harvardx.harvard.edu"


# LORIS VARS
# -------------------------------------------------------------

# these mimic loris default for setup.py
# changes here don't actually change the actual install vars...
service_name: "loris"
service_user: '{{ service_name }}'
service_group: '{{ service_name }}'

# these are default values, might be overwritten in facts_setup role
service_rootdir: '/opt/{{ service_name }}'
service_venv_dir: "{{ service_rootdir }}/venv"
service_log_dir: "{{ service_rootdir }}/log"
service_log_path: "{{ service_log_dir }}/{{ service_name }}.log"
# uncomment, otherwise defaul is debug: 'DEBUG'|'INFO'|'WARNING'|'ERROR'|'CRITICAL'
#service_log_level: "DEBUG"

service_install_dir: '{{ service_rootdir }}/{{ service_name }}'
service_static_dir: '{{ service_rootdir }}/www'
service_config_dir: '{{ service_rootdir }}/conf'
service_config_path: '{{ service_config_dir }}/{{ service_name }}.conf'
service_bin_dir: '{{ service_rootdir }}/bin'
service_data_dir: '{{ service_rootdir }}/data'
service_tmp_dir: '{{ service_data_dir }}/tmp'
service_cache_dir: '{{ service_data_dir }}/cache'
service_images_dir: '{{ service_data_dir }}/images'

# uncomment below if you want loris to use s3resolver
#loris_s3_bucket_prefix: 's3//images_bucket/images_prefix'

# uncomment below if you want to transfer a tar.gz with sample images
local_image_sample_path_tar_gz: '/Volumes/hx-images/iiif_images_tif.tar.gz'


var_service_gunicorn_port: "{{ service_name | upper }}_GUNICORN_PORT"
var_service_gunicorn_host: "{{ service_name | upper }}_GUNICORN_HOST"
service_gunicorn_port: "{{ lookup('env', var_service_gunicorn_port) | default('9090', true) }}"
service_gunicorn_host: "{{ lookup('env', var_service_gunicorn_host) | default('127.0.0.1', true) }}"
gunicorn_timeout_seconds: 300  # workers timeout - used in nginx cfg

service_varnish_backend_port: 9091  # for loris/nginx and varnish to talk

# easier to create dirs with this dict
service_dirs_to_create:
    - '{{ service_rootdir }}'
    - '{{ service_bin_dir }}'
    - '{{ service_log_dir }}'
    - '{{ service_static_dir }}'
    - '{{ service_config_dir }}'
    - '{{ service_data_dir }}'
    - '{{ service_tmp_dir }}'
    - '{{ service_cache_dir }}'
    - '{{ service_images_dir }}'


# python packages to install
service_python_dependencies:
    - {"name": "Pillow",     "version": "4.3.0"}
    - {"name": "Werkzeug",   "version": "0.12.2"}
    - {"name": "gunicorn",   "version": "19.7.1"}
    - {"name": "configobj",  "version": "5.0.0"}
    - {"name": "requests",   "version": "2.11.0"}
    - {"name": "responses",  "version": "0.3.0"}
    - {"name": "boto",       "version": "2.40.0"}



# for nmaekawa.apt
apt_required_packages_loris:
    - 'python-pip'
    - 'python-dev'
    - 'python-setuptools'
    - 'libjpeg-turbo8-dev'
    - 'libfreetype6-dev'
    - 'zlib1g-dev'
    - 'liblcms2-dev'
    - 'liblcms2-utils'
    - 'libtiff5-dev'
    - 'libwebp-dev'
    - 'nginx'
    - 'supervisor'


# for Stouts.users
users_enabled: yes

users_users:
    - name: nmaekawa
      groups: ['sudo']
      authorized:
          - https://github.com/nmaekawa.keys

    - name: lduarte
      groups: ['sudo']
      authorized:
          - https://github.com/lduarte1991.keys

    - name: '{{ service_user }}'
      authorized: []


users_ssh_keys: '{{ users_users }}'

users_to_install:
    - 'nmaekawa'
    - 'lduarte'
    - '{{ service_user }}'


# VARNISH VARS
# -------------------------------------------------------------
varnish_default_backend_host: 127.0.0.1
varnish_default_backend_port: '{{ service_varnish_backend_port }}'

varnish_default_vcl_template_path: roles/varnishlog/templates/default.vcl.j2

varnish_enabled_services:
  - varnish
  - varnishncsa
    #- varnishlog

# Optionally define additional backends.
#varnish_backends:
#   loris:
#     host: 10.8.0.7
#     port: 80
#   nodejs:
#     host: 10.0.2.3
#     port: 80


# PROXY VARS
# -------------------------------------------------------------

ids_iiif_image_hostname: 'ids.lib.harvard.edu'

# to be overwritten when aws cluster
proxy_dns_resolver: '8.8.8.8' # google resolver
proxy_static_dir: '/var/www/html'

# for nmaekawa.apt
apt_required_packages_proxy:
    - 'nginx'





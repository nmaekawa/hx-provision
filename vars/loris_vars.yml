---

# assumes either aws or vagrant, then derive remote_user(assumes ubuntu)
use_aws: "{{ (ec2_tag_cluster == 'vagrant') | ternary(False, True) }}"
my_remote_user: "{{ use_aws | ternary('ubuntu', 'vagrant') }}"


# these mimic loris default for setup.py
# changes here don't actually change the actual install vars...
loris_name: loris
loris_user: '{{ loris_name }}'
loris_group: '{{ loris_name }}'

# these are default values, might be overwritten in facts_setup role
loris_rootdir: '/opt/{{ loris_name }}'
loris_source_path: '{{ loris_rootdir }}/loris'
loris_log_path: '{{ loris_rootdir }}/log'
loris_log_filename: '{{ loris_name }}.log'
loris_log_level: 'DEBUG' # 'DEBUG'|'INFO'|'WARNING'|'ERROR'|'CRITICAL'
loris_www_path: '{{ loris_rootdir }}/www'
loris_image_path: '{{ loris_rootdir }}/images'
loris_config_path: '{{ loris_rootdir }}/conf'
loris_config_filename: '{{ loris_name }}.conf'
loris_cache_path: '{{ loris_rootdir }}/cache'
loris_tmp_path: '{{ loris_rootdir }}/tmp'
loris_bin_path: '{{ loris_rootdir }}/bin'
# uncomment below if you want to use s3 as image storage
#loris_s3_bucket_prefix: 's3//images_bucket/images_prefix'

loris_port: 9090
gunicorn_timeout_seconds: 300  # workers timeout

# easier to create dirs with this dict
loris_dirs:
    - '{{ loris_rootdir }}'
    #- '{{ loris_source_path }}'  # git clone creates this!
    - '{{ loris_log_path }}'
    - '{{ loris_www_path }}'
    - '{{ loris_image_path }}'
    - '{{ loris_config_path }}'
    - '{{ loris_cache_path }}'
    - '{{ loris_tmp_path }}'
    - '{{ loris_bin_path }}'


# python packages to install
loris_python_dependencies:
    - {"name": "Pillow",     "version": "4.3.0"}
    - {"name": "Werkzeug",   "version": "0.12.2"}
    - {"name": "gunicorn",   "version": "19.7.1"}
    - {"name": "configobj",  "version": "5.0.0"}
    - {"name": "requests",   "version": "2.11.0"}
    - {"name": "responses",  "version": "0.3.0"}
    - {"name": "boto",       "version": "2.40.0"}



# for nmaekawa.apt
apt_required_packages_loris:
    - 'python-pip'
    - 'python-dev'
    - 'python-setuptools'
    - 'libjpeg-turbo8-dev'
    - 'libfreetype6-dev'
    - 'zlib1g-dev'
    - 'liblcms2-dev'
    - 'liblcms2-utils'
    - 'libtiff5-dev'
    - 'libwebp-dev'
    - 'nginx'
    - 'supervisor'


# for Stouts.users
users_enabled: yes

users_users:
    - name: nmaekawa
      groups: ['sudo']
      authorized:
          - https://github.com/nmaekawa.keys

    - name: lduarte
      groups: ['sudo']
      authorized:
          - https://github.com/lduarte1991.keys

    - name: '{{ loris_user }}'
      authorized: []


users_ssh_keys: '{{ users_users }}'

users_to_install:
    - 'nmaekawa'
    - 'lduarte'
    - '{{ loris_user }}'


# VARNISH VARS
varnish_default_backend_host: 10.8.0.7
varnish_default_backend_port: 80

# Optionally define additional backends.
#varnish_backends:
#   loris:
#     host: 10.8.0.7
#     port: 80
#   nodejs:
#     host: 10.0.2.3
#     port: 80



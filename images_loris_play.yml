---
#
# assumes common_play.yml already applied to all involved inventory
#

- import_playbook: common_play.yml

- hosts: '{{ target_hosts | default("tag_service_loris", true) }}'
  remote_user: "{{ my_remote_user }}"
  become: yes
  become_user: root
  vars:
    local_user:
      name: '{{ service_user }}'
      authorized: []
  vars_files:
      - vars/common_vars.yml
      - vars/loris_vars.yml

  tasks:
      - include_role:
          name: external/nmaekawa.apt
        vars:
          apt_other_packages: '{{ apt_required_packages_loris }}'

      - include_role:
          name: external/Stouts.users
        vars:
          users_users: '{{ [local_user] }}'


- hosts: '{{ target_hosts | default("tag_service_loris", true) }}'
  remote_user: "{{ my_remote_user }}"
  become: yes
  become_user: root
  vars_files:
      - vars/common_vars.yml
      - vars/loris_vars.yml
  vars:
    loris_git_repo: 'https://github.com/loris-imageserver/loris.git'
    loris_git_version: 'v3.1.0'

  handlers:
    - include: handlers/main.yml

  tasks:
      - include_role:
          name: external/nmaekawa.apt
        vars:
            apt_other_packages: '{{ apt_required_packages_loris }}'

      - name: setup loris
        include_role:
            name: hx.loris
        vars:
            local_image_sample_path_tar_gz: '/Volumes/Projects/Dev_Team/images/images_prod_20180824.tar.gz'


  # install log/metrics scripts, syslog to s3, put-metrics to cloudwatch
- import_playbook: cloudwatch_scripts_play.yml
  when: ec2_tag_cluster == 'prod'


- hosts: '{{ target_hosts | default("tag_service_loris", true) }}'
  remote_user: "{{ my_remote_user }}"
  become: yes
  become_user: root
  vars:
      project_name: '{{ hostvars[inventory_hostname].ec2_tag_project | mandatory}}'
      service_role: '{{ hostvars[inventory_hostname].ec2_tag_service | mandatory}}'  # this should be "loris"...
      cluster_env: '{{ (hostvars[inventory_hostname].ec2_tag_cluster == "prod")| ternary("prod", "devo") }}'
      cloudwatch_namespace: '{{ cloudwatch_namespace_prefix }}/{{ project_name }}'
      cronjob_scripts_dir: '/usr/local/bin'
  vars_files:
      - vars/common_vars.yml
      - vars/loris_vars.yml

  tasks:
      # install script for images sync, if images instance
      - import_tasks: roles/hx.loris/tasks/setup_s3_sync_images.yml
        vars:
            s3_sync_bucket_name: '{{ s3_source_bucket_name }}'
            s3_sync_prefix: 'images'
            target_s3_sync_dir: '{{ service_images_dir }}'
        when: ec2_tag_cluster == 'prod' and not loris_use_s3resolver


      - name: run initial s3 sync for images
        become: yes
        become_user: '{{ service_user }}'
        shell: >
            /usr/bin/aws s3 sync
            "s3://{{ s3_source_bucket_name }}/images"
            "{{ service_images_dir }}"
            2>&1 | logger -t "[s3 sync INITIAL]"
        when: ec2_tag_cluster == 'prod' and not loris_use_s3resolver

      - name: run initial s3 sync for loris cache
        become: yes
        become_user: '{{ service_user }}'
        shell: >
            /usr/bin/aws s3 sync
            "s3://{{ s3_source_bucket_name }}/loris-cache"
            "{{ service_cache_dir }}"
            2>&1 | logger -t "[s3 sync INITIAL]"
        when: ec2_tag_cluster == 'prod' and not loris_use_s3resolver





---
# needs the below to be defined
#
# from vars/<service>_vars.yml
# service_server_name
# nginx_ssl_port
# nginx_nonssl_port
#
# from vars/<service>_vars.yml
# service_name
#
# from <playbook>_play.yml:
# nginx_template_path
#
# from common_vars.yml:
# service_cert_name  | depends on cert_name from vars/<service>_vars.yml
# org_public_domain
# is_harvard_domain
# local_certs_dir
#
# from gather_facts:
# ec2_tag_cluster
#
# from roles/nginx/defaults/main.yml:
# target_certs_dir
#
    - include_tasks: config_ssl_certs.yml

    - name: ensure location dirs exist
      file:
        path: '{{ location.path | default("/var/www/", true) }}'
        group: www-data
        owner: www-data
        mode: 0775
        state: directory
      loop: '{{ server.locations }}'
      loop_control:
        loop_var: location

    - name: create webdav password file for VAGRANT
      htpasswd:
        path: "{{ location.auth_basic_user_filepath | default('/etc/nginx/.passwords_list', true) }}"
        name: 'user'
        password: 'password'
        owner: root
        group: www-data
        mode: 0640
        state: present
      when: ec2_tag_cluster == 'vagrant' and location.is_webdav is defined and location.is_webdav == 'yes'
      loop: '{{ server.locations }}'
      loop_control:
        loop_var: location

    - name: COPY webdav password file
      copy:
        src: '{{ location.source_auth_basic_user_filepath }}'
        dest: '{{ location.auth_basic_user_filepath }}'
        owner: 'root'
        group: 'www-data'
        mode: 0640
      when: ec2_tag_cluster != 'vagrant' and location.is_webdav is defined and location.is_webdav == 'yes'
      loop: '{{ server.locations }}'
      loop_control:
        loop_var: location

    - name: drop nginx site config for {{ server.service_server_name }}
      template:
        src: '{{ server.nginx_template_path }}'
        dest: '/etc/nginx/sites-available/{{ server.service_server_name }}'
        backup: yes

    - name: ensure {{ server.service_server_name }} site is enabled
      file:
        src: /etc/nginx/sites-available/{{ server.service_server_name }}
        dest: /etc/nginx/sites-enabled/{{ server.service_server_name }}
        state: link


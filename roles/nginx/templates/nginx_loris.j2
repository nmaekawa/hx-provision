# config for reverse-proxy right before loris
# does not assume a varnish cache in front of loris!

{% if (with_ssl == 'true') %}
server {
    listen  80;
    return  301  https://$host$request_uri;
}
{% endif %}


server {
{% if (with_ssl == 'true') %}
    listen              80;
    ssl on;
    ssl_certificate     {{ nginx_ssl_dest_dir }}/{{ cert_dns }}.crt;
    ssl_certificate_key {{ nginx_ssl_dest_dir }}/{{ cert_dns }}.key;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;
{% else %}
    listen 80;
{% endif %}

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    root {{ service_static_dir }}/;

    location = / {
        index index.html;
    }

    location  /harvard_logo.tif/full/full/0/default.jpg {
        alias {{ service_static_dir }}/harvard_logo.jpg;
    }

    location / {
        try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {

        rewrite full/full /404.html last;     # do not server originals
        rewrite ^(.*)native(.*)$ $1default$2; # support iiif 1.0
        rewrite ^(.*)default$ $1default.jpg;  # ensure format present for iiif 2.0

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_read_timeout {{ gunicorn_timeout_seconds }};
        proxy_connect_timeout {{ gunicorn_timeout_seconds }};
        proxy_intercept_errors on;
        proxy_pass http://{{ service_gunicorn_host }}:{{ service_gunicorn_port }};
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }
    location /404.html {
        internal;
    }
    location /50x.html {
        internal;
    }
}

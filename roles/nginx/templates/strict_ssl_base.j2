# based on config:
# generated 2020-08-19, Mozilla Guideline v5.6, nginx 1.14.0, OpenSSL 1.1.1, intermediate configuration
# https://ssl-config.mozilla.org/#server=nginx&version=1.14.0&config=intermediate&openssl=1.1.1&guideline=5.6

server {
    listen       {{ server.nginx_nonssl_port }};
    listen       [::]:{{ server.nginx_nonssl_port }};
{% if webserver_dns is defined and webserver_dns != '' %}
{% if server.hx_subdomain is defined and server.hx_subdomain != '' %}
    server_name  {{ server.hx_subdomain }}.{{ webserver_dns }};
{% else %}
    server_name  {{ webserver_dns }};
{% endif %}
{% endif %}
    return  301  https://$host$request_uri;
}

server {
    listen              {{ server.nginx_ssl_port }} ssl http2;
    listen              [::]:{{ server.nginx_ssl_port }} ssl http2;
{% if webserver_dns is defined and webserver_dns != '' %}
{% if server.hx_subdomain is defined and server.hx_subdomain != '' %}
    server_name  {{ server.hx_subdomain }}.{{ webserver_dns }};
{% else %}
    server_name         {{ webserver_dns }};
{% endif %}
{% endif %}

    ssl_certificate     {{ target_certs_dir }}/{{ service_cert_name }}.crt;
    ssl_certificate_key {{ target_certs_dir }}/{{ service_cert_name }}.key;
    ssl_session_timeout 1d;
    ssl_session_cache   shared:SSL:10m;  # 10Mb ~40000s sessions
    ssl_session_tickets off;

    # diffie-hellman params
    ssl_dhparam         {{ target_certs_dir }}/dhparam.crt;

    # intermediate configuration
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (63072000 ~2y)
    add_header Strict-Transport-Security "max-age=63072000" always;

    {% if (is_harvard_domain) %}
    # OCSP stapling
    ssl_stapling            on;
    ssl_stapling_verify     on;
    # verify chain of trust of OCSP reponse using root CA and intermediate certs
    ssl_trusted_certificate {{ target_certs_dir }}/{{ service_cert_name }}_interm.crt;
    {% endif %}

    root {{ static_dir }};
    autoindex off;

    {% block error_page %}
    {% if redirect_error_to is defined and redirect_error_to != '' %}
    error_page 404 =301 {{ redirect_error_to }};
    {% else %}
    error_page 404 /404.html;
    {% endif %}
    error_page 500 502 503 504 /50x.html;
    {% endblock %}

    {% if server.service_upload_max_size is defined and server.service_upload_max_size != '' %}
    client_max_body_size {{ server.service_upload_max_size }};
    {% endif %}

    {% block custom_location %}
    {% endblock %}

    {% block robots_location %}
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }
    {% endblock %}

    {% block error_location %}
    location /404.html {
        internal;
    }
    location /50x.html {
        internal;
    }
    {% endblock %}
}

# based on config:
# generated 2020-08-19, Mozilla Guideline v5.6, nginx 1.14.0, OpenSSL 1.1.1, intermediate configuration
# https://ssl-config.mozilla.org/#server=nginx&version=1.14.0&config=intermediate&openssl=1.1.1&guideline=5.6

server {
    listen       {{ nginx_non_ssl_port | default(80) }} default_server;
    listen       [::]:{{ nginx_non_ssl_port | default(80) }} default_server;
    {% if webserver_dns is defined and webserver_dns != '' %}
    server_name  {{ webserver_dns }};
    {% endif %}
    return  301  https://$host$request_uri;
}

server {
    listen              {{ nginx_ssl_port | default(443) }} ssl http2;
    listen              [::]:{{ nginx_ssl_port | default(443) }} ssl http2;
    {% if webserver_dns is defined and webserver_dns != '' %}
    server_name         {{ webserver_dns }};
    {% endif %}

    ssl_certificate     {{ nginx_ssl_dest_dir }}/{{ service_cert_name }}.crt;
    ssl_certificate_key {{ nginx_ssl_dest_dir }}/{{ service_cert_name }}.key;
    ssl_session_timeout 1d;
    ssl_session_cache   shared:SSL:10m;  # 10Mb ~40000s sessions
    ssl_session_tickets off;

    # diffie-hellman params
    ssl_dhparam         {{ nginx_ssl_dest_dir }}/dhparam.crt;

    # intermediate configuration
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (63072000 ~2y)
    add_header Strict-Transport-Security "max-age=63072000" always;

    {% if (is_harvard_domain) %}
    # OCSP stapling
    ssl_stapling            on;
    ssl_stapling_verify     on;
    # verify chain of trust of OCSP reponse using root CA and intermediate certs
    ssl_trusted_certificate {{ nginx_ssl_dest_dir }}/{{ service_cert_name }}_interm.crt;
    {% endif %}

    root {{ static_dir }};

    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 426 428 429 431 444 451 500 501 502 503 504 505 506 507 508 510 511 599 @gotohx;
    location @gotohx {
        return 301 {{ www2_proxy_to }};
    }

    location = / {
        index index.html;
    }
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }
}

server {
    listen              {{ nginx_ssl_port_srt | default(5443, true) }};
    listen              [::]:{{ nginx_ssl_port_srt | default(5443) }} ssl http2;
    {% if webserver_dns is defined and webserver_dns != '' %}
    server_name         {{ webserver_dns }};
    {% endif %}

    ssl_certificate     {{ nginx_ssl_dest_dir }}/{{ service_cert_name }}.crt;
    ssl_certificate_key {{ nginx_ssl_dest_dir }}/{{ service_cert_name }}.key;
    ssl_session_timeout 1d;
    ssl_session_cache   shared:SSL:10m;  # 10Mb ~40000s sessions
    ssl_session_tickets off;

    # diffie-hellman params
    ssl_dhparam         {{ nginx_ssl_dest_dir }}/dhparam.crt;

    # intermediate configuration
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (63072000 ~2y)
    add_header Strict-Transport-Security "max-age=63072000" always;

    {% if (is_harvard_domain) %}
    # OCSP stapling
    ssl_stapling            on;
    ssl_stapling_verify     on;
    # verify chain of trust of OCSP reponse using root CA and intermediate certs
    ssl_trusted_certificate {{ nginx_ssl_dest_dir }}/{{ service_cert_name }}_interm.crt;
    {% endif %}

    root {{ static_dir_srt }};

    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 426 428 429 431 444 451 500 501 502 503 504 505 506 507 508 510 511 599 @gotohx;
    location @gotohx {
        return 301 {{ www2_proxy_to }};
    }

    location = / {
        index index.html;
    }
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    #
    # Wide-open CORS config for nginx
    # from https://enable-cors.org/server_nginx.html
    #
    location / {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        }
    }
}

# install scripts for monitoring ec2 instances
#
#
# this playbook requires awscli locally installed!
# and implies aws = true
#
---

# https://gist.github.com/gwillem/4ba393dceb55e5ae276a87300f6b8e6f
# https://stackoverflow.com/questions/32429259/ansible-fails-with-bin-sh-1-usr-bin-python-not-found/41429731
- hosts: '{{ target_hosts | default("all", true) }}'
  remote_user: "{{ my_remote_user }}"
  become: yes
  become_user: root
  gather_facts: False
  vars_files:
    - vars/common_vars.yml

  tasks:
      - name: install python2
        raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
        register: result
        changed_when: "result.stdout != ''"


- hosts: '{{ target_hosts | default("all", true) }}'
  remote_user: "{{ my_remote_user }}"
  become: yes
  become_user: root
  vars:
      project_name: '{{ hostvars[inventory_hostname].ec2_tag_project | mandatory}}'
      service_name: '{{ hostvars[inventory_hostname].ec2_tag_service | mandatory}}'
      cluster: '{{ hostvars[inventory_hostname].ec2_tag_cluster | mandatory}}'
      cronjob_scripts_dir: '/usr/local/bin'
      cloudwatch_namespace: 'HX/CustomMetrics/{{ project_name }}'
      is_varnish: '{{ service_name | regex_search("varnish") }}'
  vars_files:
      - vars/common_vars.yml

  tasks:

      - debug:
          msg: "project_name={{ project_name }}; service_name={{ service_name }}; cluster={{ cluster }}; namespace={{ cloudwatch_namespace }}"

      # associate proper instance profile for permissions
      - import_tasks: roles/external/nmaekawa.iam.instance-profile/tasks/associate_iam_instance_profile.yml
        vars:
            instance_profile_name: "hx_{{ project_name }}-{{ cluster }}_instance_profile"
            instance_id_to_associate: '{{ hostvars[inventory_hostname].ec2_id }}'

      - import_role:
          name: external/Stouts.users
        vars:
            users_enabled: yes
            users_users:
                - name: cloudwatch
                  authorized: []
            users_to_install:
                - cloudwatch

      - import_role:
          name: external/nmaekawa.cloudwatch
        vars:
            script_install_dir: '{{ cronjob_scripts_dir }}'
            cronjob_owner: cloudwatch

      # install script for syslog backup
      - import_tasks: roles/external/nmaekawa.cloudwatch/tasks/install_s3_backup.yml
        vars:
            script_install_dir: '{{ cronjob_scripts_dir }}'
            cronjob_owner: root
            s3_backup_bucket_name: 'backups-hx-edu'
            s3_backup_prefix: '{{ cluster }}/{{ project_name }}'
            file_backup_prefix: '{{ service_name }}'
            files_to_backup:
                - /var/log/syslog.1

      # install script for nginx logs backup
      - import_tasks: roles/external/nmaekawa.cloudwatch/tasks/install_s3_backup.yml
        vars:
            script_install_dir: '{{ cronjob_scripts_dir }}'
            cronjob_owner: root
            s3_backup_bucket_name: 'backups-hx-edu'
            s3_backup_prefix: '{{ cluster }}/{{ project_name }}'
            file_backup_prefix: '{{ service_name }}'
            files_to_backup:
                - /var/log/nginx/access.log.1
                - /var/log/nginx/error.log.1
        when: "service_name == 'reverseproxy'"

      # install script for varnish logs backup
      - import_tasks: roles/external/nmaekawa.cloudwatch/tasks/install_s3_backup.yml
        vars:
            script_install_dir: '{{ cronjob_scripts_dir }}'
            cronjob_owner: root
            s3_backup_bucket_name: 'backups-hx-edu'
            s3_backup_prefix: '{{ cluster }}/{{ project_name }}'
            file_backup_prefix: '{{ service_name }}'
            files_to_backup:
                - /var/log/varnish/varnishncsa.log
        when: "is_varnish is defined and is_varnish == 'varnish'"

      # install script for images sync, if images instance
      - import_tasks: roles/external/nmaekawa.cloudwatch/tasks/install_s3_sync.yml
        vars:
            script_install_dir: '{{ cronjob_scripts_dir }}'
            cronjob_owner: "{{ service_name }}"
            s3_sync_bucket_name: 'sources-hx-edu'
            s3_sync_prefix: 'images'
            target_s3_sync_dir: '/opt/loris/data/images'
        when: "service_name == 'loris'"

      - name: run initial s3 sync for images
        shell: >
            /usr/bin/aws s3 sync
            "s3://sources-hx-edu/images"
            "/opt/loris/data/images"
            2>&1 | logger -t "[s3 sync INITIAL]"
        when: "service_name == 'loris'"


      # install script for manifests sync, if manifests instance
      - import_tasks: roles/external/nmaekawa.cloudwatch/tasks/install_s3_sync.yml
        vars:
            script_install_dir: '{{ cronjob_scripts_dir }}'
            cronjob_owner: "{{ service_name }}"
            s3_sync_bucket_name: 'sources-hx-edu'
            s3_sync_prefix: 'manifests'
            target_s3_sync_dir: '/opt/hxprezi/data'
        when: "service_name == 'hxprezi'"

      - name: run initial s3 sync for images
        shell: >
            /usr/bin/aws s3 sync
            "s3://sources-hx-edu/manifests"
            "/opt/hxprezi/data"
            2>&1 | logger -t "[s3 sync INITIAL]"
        when: "service_name == 'hxprezi'"






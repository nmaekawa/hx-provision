---
#
# assumes ec2 instance has the `ebs_device` volume already attached.
#

- import_playbook: common_play.yml


- hosts: '{{ target_hosts | default("tag_service_postgres", true) }}'
  remote_user: "{{ my_remote_user }}"
  become: yes
  become_user: root
  vars_files:
    - vars/common_vars.yml
    - vars/postgres_vars.yml

  handlers:
      - include_tasks: handlers/main.yml

  tasks:

    - include_role:
        name: external/nmaekawa.postgres

    - name: make sure postgres is running
      service:
        name: postgresql
        state: started


#
# below code is not really used because all db was moved to rds
#

- hosts: '{{ target_hosts | default("tag_service_postgres", true) }}'
  remote_user: "{{ my_remote_user }}"
  become: yes
  become_user: root
  vars:
      project_name: '{{ hostvars[inventory_hostname].ec2_tag_project | mandatory}}'
      service_role: '{{ hostvars[inventory_hostname].ec2_tag_service | mandatory}}'
      cluster_env: '{{ (hostvars[inventory_hostname].ec2_tag_cluster == "prod")| ternary("prod", "devo") }}'
      cloudwatch_namespace: '{{ cloudwatch_namespace_prefix }}/{{ project_name }}'
  vars_files:
      - vars/common_vars.yml
      - vars/postgres_vars.yml

  tasks:
      - ec2_metadata_facts:
        when: ec2_tag_cluster == 'prod'

      - debug:
          msg: "project_name={{ project_name }}; service_role={{ service_role }}; cluster_env={{ cluster_env }}; namespace={{ cloudwatch_namespace }}"

      - name: s3 backup | cronjob for postgres log->s3
        cron:
          name: "s3 sync for postgres log"
          user: postgres
          special_time: daily  # check when the logs are being rotated to schedule after that
          state: present
          job: >
            /usr/bin/aws s3 sync
            {{ db_log_dir }}
            s3://{{ s3_backup_bucket_name }}/{{ cluster_env }}/{{ project_name }}/{{ service_role }}_{{ ansible_ec2_instance_id }}
        when: ec2_tag_cluster == 'prod'

      - name: install s3 cronjob for postgres databases
        cron:
          name: "s3 sync for postgres databases"
          user: postgres
          special_time: daily  # check when dumps are performed to schedule after that
          state: present
          job: >
            /usr/bin/aws s3 sync
            {{ db_backup_dir }}
            s3://{{ s3_backup_bucket_name }}/{{ cluster_env }}/{{ project_name }}/{{ service_role }}_{{ ansible_ec2_instance_id }}
        when: ec2_tag_cluster == 'prod'



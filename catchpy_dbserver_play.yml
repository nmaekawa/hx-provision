---
#
# assumes ec2 instance has a `ebs_device` volume already attached.
# it will blindly format and mount the device!
# *** data on the volume will be _erased_ ***
#

- import_playbook: common_play.yml


- hosts: '{{ target_hosts | default("tag_service_postgres", true) }}'
  remote_user: "{{ my_remote_user }}"
  become: yes
  vars_files:
      - vars/common_vars.yml
      - vars/postgres_vars.yml
  handlers:
      - include: handlers/main.yml

  tasks:
      - name: make filesystem out of ebs
        filesystem:
            fstype: ext4
            dev: "{{ ebs_device }}"
        when: "use_aws"

      # always create because of local tests in vagrant
      - name: create mountpoint
        file:
            path: "{{ ebs_mountpoint }}"
            state: directory

      - name: mount ebs
        mount:
            path: "{{ ebs_mountpoint }}"
            src: "{{ ebs_device }}"
            fstype: ext4
            state: mounted
        when: "use_aws"


#
# assumes common_play.yml already applied to all involved inventory
#

- hosts: '{{ target_hosts | default("tag_service_postgres", true) }}'
  remote_user: "{{ my_remote_user }}"
  become: yes
  become_user: root
  vars:
    postgres_version: 11
    #postgres_version: 9.6
  vars_files:
    - vars/common_vars.yml
    - vars/postgres_vars.yml

  handlers:
      - include: handlers/main.yml

  tasks:
    - include_role:
        name: postgresql

    - name: make sure postgres is running
      service:
        name: postgresql
        state: started

    - import_tasks: roles/postgresql/tasks/pg_account.yml
      vars:
        service_db_name: "{{ lookup('env', 'SERVICE_DB_NAME') | mandatory }}"
        service_db_user: "{{ lookup('env', 'SERVICE_DB_USER') | mandatory }}"
        service_db_password: "{{ lookup('env', 'SERVICE_DB_PASSWORD') | mandatory }}"

    - import_tasks: roles/postgresql/tasks/pg_backup.yml
      vars:
        service_db_name: "{{ lookup('env', 'SERVICE_DB_NAME') | mandatory }}"
        db_backup_s3_path: "something bogus"





